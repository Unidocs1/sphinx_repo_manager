%YAML 1.2
---
###################################################################################################
# This YAML file configures repository settings for the Sphinx documentation system.        
# - (!) PATHS ARE RELATIVE TO YOUR `conf.py`
# - Specifies base path for cloning and details for each version-controlled set of docs           
# - See the bottom of the file for a fully-commented repo example
# - Most all properties are OPTIONAL; see comment for fallback vals                   
# - Most path/slashes/are/normalized for you to prevent confusion; use any style here            
# - base_clone_path will clone as "{repo_name}-{tag}" or "{repo_name}--{branch}"
#   - The actual /content you'll refer to will just simply be {repo_name} 
#     - Can further be overridden via repo['repo_symlink_path']. 
#     - Eg: you may want to shorten long repo names for friendlier public-facing url slugs
# - It *is safe* (and encouraged) to periodically wipe your auto-gen'd dirs:
#   - _repos-available/
#   - _static/{anything not _local}/
#   - _blobs/{anything not _local}/
#   - content/
###################################################################################################

# - More-verbose logging or debugging, including dumping CLI args for git ops like cloning
# - Unlocks more `debug_` options below
# - Default==false
debug_mode: false

# - If debug_mode and this are both true, stops the sphinx-build on extension done by throwing an arbitrary err
# - Default==false
debug_stop_build_on_extension_done: false

# - Determines which repo info to use for git checkout
# - Choices: "dev_stage", "production_stage"
# - Default=="dev_stage"Default==
stage: "dev_stage"

# - (!) DANGEROUS: If false, will skip this extension both locally + on ReadTheDocs (RTD)
# - Useful if you 100% know all repos are up-to-date for faster iterations
# - Default==trueDefault==
enable_repo_manager: true

# - If enable_repo_manager && false, will skip this extension locally
# - Useful if you 100% know all repos are up-to-date for faster iterations *locally only*
# - (!) If you are missing images/blobs, you probably want to set this to true
# - Default==trueDefault==
enable_repo_manager_local: true

# - If false and not on RTD, will add breathe project output files to the exclude_patterns.
# - Set to false to speed up non-RTD builds. RTD builds ignore this setting
# - Default==falseDefault==.
enable_breathe_local: false

# - Max workers for local sphinx_repo_manager for multi-threading
# - (!) Logs will still appear *mostly* chronologically, but in batches of n # of workers.
#   - Eg; if 3 workers, the 1st 3 log results may be something like: 
  #   Repo2{a,b,c}, Repo3{a,b,c}, Repo1{a,b,c}
#   - TODO: Log revamp to better accommodate async multi-threading
# - Recommended just 1 if needing *chronological* debugging
# - Default==1 (later 5, once git_helper logs handle async)Default==
max_workers_local: 10

# - Max workers for ReadTheDocs deployment for multi-threading
# - RTD has max 1 for free accts; use just 1 for debugging or free accts
# - Default==2Default==
max_workers_rtd: 1

# - If true, will stash and continue if working directory is dirty
# - Else throws err (stops); Default==trueDefault==
stash_and_continue_if_wip: true

# - Default base path for cloning repos relative to this file 
# - Normalizes "os/path/slashes"
# - Default=="content"Default==
base_symlink_path: "content"

# - Default base for cloning; normalizes "os/path/slashes"
# - Default==source/_repos-availableDefault==
base_clone_path: "_repos-available"

# - If repository omits "branch", this will be the fallback 
# - Default=="" (use default branch), if null or omitted
# - Tag will be prioritized over branch, if set
default_branch: "dev"

# - Default path to individual repo dirs we [mostly] want to 
#   clone - instead of the entire repo 
# - *Try* to be consistent between all repos, but can override via individual 
# - Repository `repo_sparse_path` override; normalizes "explicit/forward/slashes" 
# - The parent dirs outside this will be 99% empty
# - Default to "docs"Default==
repo_sparse_path: "docs"

# - Supports {repo_sparse_path} template
# - When we symlink from base_clone_path, we may want to set the src deeper
# - Nested than what we cloned; normalizes "os/path/slashes"
# - If kept default, you can access static content, like images, via `../_static/{repo_name}/images/`
# - Default=="docs/source/content"Default==
# - TODO: Support {repo_sparse_path} replacement; if repo_sparse_path isn't "docs", this will fail
base_clone_path_root_symlink_src: "{repo_sparse_path}/source/content"

# Default repo auth, declared in .env
# TODO: Add optional, per-repo `dotenv_repo_auth_[user|token]` overrides
dotenv_repo_auth_user_key_name: "REPO_AUTH_USER"  # Likely "oauth2" if using access token
dotenv_repo_auth_token_key_name: "REPO_AUTH_TOKEN"
throw_on_missing_auth_token: true  # If true, will throw err if missing; Default==trueDefault==

# ------------------------------------------------------------------------------
# - (!) SEE MOCK REPO EXAMPLE @ BOTTOM, CONTAINING ALL [HEAVILY-COMMENTED] OPTIONS
# - To see an alternate, production-grade template that Xsolla Backend actively uses, see repo root `templates/`
repositories:
  # Static docs containing most !repo content >>
  sphinx_demo_doc:
    url: "https://github.com/Unidocs1/sphinx_demo_doc"
#    base_clone_path_root_symlink_src_override: "docs"  # Overrides symlinked content path depth; affects url slugs!
#    dev_stage:
#      checkout: "dev"  # Overrides `default_branch`
    
############################################
# EXAMPLE REPO WITH ALL OPTIONS -- COMMENTED
############################################

#mock_repo_example:
## - Supports https (remote), file:// (local absolute), file: (local relative) paths; ssh may work, but untested
## - .git suffix == optional;
## - If deploying a private repo to RTD, ensure you set your env vars via RTD's web dash 
#url: "https://source.goxbe.io/Core/foo_services"
#
## - Normally named your_repo_name, but static docs is special
## - Relative to baseClonePath
## - Normalizes os/path/slashes
## - Default "{repo_name}-{tag}"
#symlink_path: "foo_services"
#
## Expects branch || tag (usually branch); if missing, falls back to {default_branch}
## This can optionally be be omitted since {default_branch} is "dev", if using the default
#dev_stage:
#  checkout: "dev"  # Normalizes os/path/slashes
#  checkout_type: "branch"  # Expects branch or tag; assumes "branch" if missing
#
## Expects branch || tag (usually tag); if missing, falls back to {default_branch}
#production_stage:
#
#  # - [tools/production_prep.py] Arbitrary version to compare before->after, if listed and
#  #   production_prep_tool_show_prev_ver_diff == true
#  prev_ver: "v1.0.0"
#  checkout: "v1.0.1"  # (!) Don"t forget to prefix with "v" to follow XBE standards
#  checkout_type: "tag"
#
## - Overrides parent `repo_sparse_path` (if true, requires base_clone_path_root_symlink_src_override)
## - Path to individual repo dirs we [mostly] want to clone - instead of the entire repo
## - Normalizes "explicit/forward/slashes"
## - The parent dirs outside this will be 99% empty
## - Default to {repo_sparse_path}Default==; see sdk_unity for use-example
#repo_sparse_path_override: "docs"
#
## - Supports {repo_sparse_path} template - will take override ver if present
## - If true, overrides base_clone_path_root_symlink_src
## - Default=={base_clone_path_root_symlink_src}Default==; see sdk_unity for use-example
#base_clone_path_root_symlink_src_override: "docs"
#
## False would be as if you didn't add the repo entry at all (or commented it out); default trueDefault==
#active: true  
## False would be as if you didn't add the repo entry at all (or commented it out); default trueDefault==
#active: true
#
## - Useful for testing multi-repo WIP without having it be stashed away or require a commit
## - Still pulls from `_static/images/{repo_name}/`
## - Default falseDefault==
#skip_repo_updates: false
